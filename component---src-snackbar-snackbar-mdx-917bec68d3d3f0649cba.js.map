{"version":3,"sources":["webpack:///../src/Snackbar/Snackbar.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","useState","Snackbar","Button","showSuccessSnackbar","showInfoSnackbar","showWarningSnackbar","showErrorSnackbar","showSnackbar","showPrimarySnackbar","closeSnackbar","Checkbox","onClick","color","persist","id","setId","enable","setEnable","label","onChange","event","target","checked","autoHideDuration","anchorOrigin","vertical","horizontal","maxSnack","action","key","simple","of","table","isMDXComponent"],"mappings":"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","file":"component---src-snackbar-snackbar-mdx-917bec68d3d3f0649cba.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/doopage-react-ui-kit/doopage-react-ui-kit/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from \"docz\";\nimport { useState } from \"react\";\nimport { Snackbar, Button, showSuccessSnackbar, showInfoSnackbar, showWarningSnackbar, showErrorSnackbar, showSnackbar, showPrimarySnackbar, closeSnackbar, Checkbox } from \"../index\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"snackbar\"\n    }}>{`Snackbar`}</h1>\n    <p>{`Base on `}<a parentName=\"p\" {...{\n        \"href\": \"https://iamhosseindhv.com/notistack\"\n      }}>{`https://iamhosseindhv.com/notistack`}</a>{` `}<br />{`\nand `}<a parentName=\"p\" {...{\n        \"href\": \"https://material-ui.com/components/snackbars/#snackbar\"\n      }}>{`https://material-ui.com/components/snackbars/#snackbar`}</a></p>\n    <h3 {...{\n      \"id\": \"note\"\n    }}>{`Note`}</h3>\n    <p>{`autoHideDuration default value was calculated base on length of message`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`autoHideDuration = Math.min(Math.max(message?.length * 50, 2000), 10000);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <p>{`In root, add `}<inlineCode parentName=\"p\">{`Snackbar`}</inlineCode>{` component`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { Snackbar } from '@doopage/react-ui-kit';\n\nconst App = () => (\n  <>\n    {/*your root component*/}\n    <Snackbar />\n  </>\n);\n\nexport default App;\n`}</code></pre>\n    <p>{`And any where you need, call `}<inlineCode parentName=\"p\">{`showSnackbar`}</inlineCode>{` func to show your snackbar`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { closeSnackbar, showSnackbar } from '@doopage/react-ui-kit';\nconst id = showSnackbar('My Snack bar')\ncloseSnackbar(id)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"playground\"\n    }}>{`Playground`}</h2>\n    <h3 {...{\n      \"id\": \"basic\"\n    }}>{`Basic`}</h3>\n    <Playground __position={0} __code={'<div>Click button to show snack bar</div>\\n<Snackbar />\\n<Button onClick={() => showSnackbar(\\'Hi, I am snackbar\\')} color=\\\"gray\\\">\\n  Default\\n</Button>\\n<Button\\n  onClick={() => showSuccessSnackbar(\\'Hi, I am snackbar\\', { persist: true })}\\n  color=\\\"success\\\"\\n>\\n  Success\\n</Button>\\n<Button onClick={() => showInfoSnackbar(\\'Hi, I am snackbar\\')} color=\\\"info\\\">\\n  Info\\n</Button>\\n<Button\\n  onClick={() => showWarningSnackbar(\\'Hi, I am snackbar\\')}\\n  color=\\\"warning\\\"\\n>\\n  Warning\\n</Button>\\n<Button onClick={() => showErrorSnackbar(\\'Hi, I am snackbar\\')} color=\\\"danger\\\">\\n  Error\\n</Button>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      Snackbar,\n      Button,\n      showSuccessSnackbar,\n      showInfoSnackbar,\n      showWarningSnackbar,\n      showErrorSnackbar,\n      showSnackbar,\n      showPrimarySnackbar,\n      closeSnackbar,\n      Checkbox,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <div>Click button to show snack bar</div>\n  <Snackbar mdxType=\"Snackbar\" />\n  <Button onClick={() => showSnackbar('Hi, I am snackbar')} color='gray' mdxType=\"Button\">Default</Button>\n  <Button onClick={() => showSuccessSnackbar('Hi, I am snackbar', {\n        persist: true\n      })} color='success' mdxType=\"Button\">Success</Button>\n  <Button onClick={() => showInfoSnackbar('Hi, I am snackbar')} color='info' mdxType=\"Button\">Info</Button>\n  <Button onClick={() => showWarningSnackbar('Hi, I am snackbar')} color='warning' mdxType=\"Button\">Warning</Button>\n  <Button onClick={() => showErrorSnackbar('Hi, I am snackbar')} color='danger' mdxType=\"Button\">Error</Button>\n    </Playground>\n    <h3 {...{\n      \"id\": \"persist\"\n    }}>{`Persist`}</h3>\n    <Playground __position={1} __code={'() => {\\n  const [id, setId] = useState()\\n  return (\\n    <>\\n      <Button\\n        onClick={() =>\\n          setId(showPrimarySnackbar(\\'Hi, I am snackbar\\', { persist: true }))\\n        }\\n        color=\\\"primary\\\"\\n      >\\n        Persist snackbar\\n      </Button>\\n      <Button onClick={() => closeSnackbar(id)} color=\\\"gray\\\">\\n        Close snackbar\\n      </Button>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      Snackbar,\n      Button,\n      showSuccessSnackbar,\n      showInfoSnackbar,\n      showWarningSnackbar,\n      showErrorSnackbar,\n      showSnackbar,\n      showPrimarySnackbar,\n      closeSnackbar,\n      Checkbox,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [id, setId] = useState();\n        return <>\n        <Button onClick={() => setId(showPrimarySnackbar('Hi, I am snackbar', {\n            persist: true\n          }))} color='primary' mdxType=\"Button\">Persist\n          snackbar</Button>\n        <Button onClick={() => closeSnackbar(id)} color='gray' mdxType=\"Button\">Close snackbar</Button>\n      </>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"advanced\"\n    }}>{`Advanced`}</h3>\n    <p>{`You can pass any material-ui snackbar props to either `}<Snackbar mdxType=\"Snackbar\" />{` component or `}<inlineCode parentName=\"p\">{`showSnackbar`}</inlineCode>{` prop.`}</p>\n    <Playground __position={2} __code={'() => {\\n  const [enable, setEnable] = useState(false)\\n  return (\\n    <>\\n      <Checkbox\\n        label={\\'Enable custom snackbar\\'}\\n        onChange={event => setEnable(event.target.checked)}\\n      />\\n      {enable ? (\\n        <>\\n          <Snackbar\\n            autoHideDuration={2000}\\n            anchorOrigin={{\\n              vertical: \\'bottom\\',\\n              horizontal: \\'left\\',\\n            }}\\n            maxSnack={2}\\n            action={key => (\\n              <>\\n                <Button\\n                  onClick={() => closeSnackbar(key)}\\n                  simple\\n                  color=\\\"transparent\\\"\\n                >\\n                  Close\\n                </Button>\\n                <Button onClick={() => closeSnackbar(key)} color=\\\"primary\\\">\\n                  Action\\n                </Button>\\n              </>\\n            )}\\n          />\\n        </>\\n      ) : (\\n        <Snackbar />\\n      )}\\n      <Button\\n        onClick={() => {\\n          showPrimarySnackbar(\\'Hi, I am snackbar\\', { autoHideDuration: 1000 })\\n        }}\\n        color=\\\"primary\\\"\\n      >\\n        Show custom snackbar\\n      </Button>\\n      <Button\\n        onClick={() => {\\n          showPrimarySnackbar(\\'Hi, I am snackbar\\', {\\n            anchorOrigin: { vertical: \\'top\\', horizontal: \\'left\\' },\\n          })\\n        }}\\n        color=\\\"info\\\"\\n      >\\n        Show custom position\\n      </Button>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      Snackbar,\n      Button,\n      showSuccessSnackbar,\n      showInfoSnackbar,\n      showWarningSnackbar,\n      showErrorSnackbar,\n      showSnackbar,\n      showPrimarySnackbar,\n      closeSnackbar,\n      Checkbox,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [enable, setEnable] = useState(false);\n        return <>\n        <Checkbox label={'Enable custom snackbar'} onChange={event => setEnable(event.target.checked)} mdxType=\"Checkbox\" />\n        {enable ? <>\n          <Snackbar autoHideDuration={2000} anchorOrigin={{\n              vertical: 'bottom',\n              horizontal: 'left'\n            }} maxSnack={2} action={key => <>\n                <Button onClick={() => closeSnackbar(key)} simple color='transparent' mdxType=\"Button\">\n                  Close\n                </Button>\n                <Button onClick={() => closeSnackbar(key)} color='primary' mdxType=\"Button\">\n                  Action\n                </Button>\n              </>} mdxType=\"Snackbar\" />\n        </> : <Snackbar mdxType=\"Snackbar\" />}\n        <Button onClick={() => {\n            showPrimarySnackbar('Hi, I am snackbar', {\n              autoHideDuration: 1000\n            });\n          }} color='primary' mdxType=\"Button\">\n          Show custom snackbar\n        </Button>\n        <Button onClick={() => {\n            showPrimarySnackbar('Hi, I am snackbar', {\n              anchorOrigin: {\n                vertical: 'top',\n                horizontal: 'left'\n              }\n            });\n          }} color='info' mdxType=\"Button\">\n          Show custom position\n        </Button>\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={Snackbar} table mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}