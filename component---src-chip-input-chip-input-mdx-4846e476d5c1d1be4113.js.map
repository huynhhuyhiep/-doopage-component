{"version":3,"sources":["webpack:///../src/ChipInput/index.tsx","webpack:///../src/ChipInput/ChipInput.mdx"],"names":["ChipInput","props","allowCreate","multiple","showCreateText","memo","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","__position","__code","__scope","Playground","Props","useState","label","placeholder","value","setValue","style","fontSize","marginBottom","join","variant","onChange","chipProps","outlined","rounded","color","setCreateText","of","table","isMDXComponent"],"mappings":"2RAGMA,EAAmC,SAACC,GAAD,OACxC,YAAC,IAAD,aAAcC,aAAW,EAACC,UAAQ,EAACC,gBAAgB,GAAWH,K,EAGhDI,eAAKL,G,iOCIb,IAAMM,EAAe,Q,6MAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,QAFDC,EAEC,EAFDA,WACGV,EACF,8BACD,OAAO,YAACO,EAAD,eAAeD,EAAiBN,EAAhC,CAAuCU,WAAYA,EAAYC,QAAQ,cAI5E,iBAAQ,CACN,GAAM,cADR,cAGA,gCAAe,6BAAGC,WAAW,KAAQ,CACjC,KAAQ,qEADG,kBAGf,0CACA,sBACE,kBAAIA,WAAW,MAAK,6BAAGA,WAAW,MAAS,CACvC,KAAQ,qEADQ,mBAItB,iBAAQ,CACN,GAAM,eADR,eAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,+IAQL,iBAAQ,CACN,GAAM,cADR,cAGA,iBAAQ,CACN,GAAM,UADR,UAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,qEAA0EC,SAAO,GAClHf,QACAQ,kBACAQ,eACAC,UACAC,oBACAnB,aANkH,gBAOlHS,IAPkH,EAQlHH,eARkH,GASjHM,QAAQ,cACb,YAAC,EAAD,CAAWQ,MAAO,aAAcC,YAAa,kBAAmBT,QAAQ,eAEtE,iBAAQ,CACN,GAAM,YADR,YAGA,YAAC,IAAD,CAAYE,WAAY,EAAGC,OAAQ,4qBAAqrBC,SAAO,GAC7tBf,QACAQ,kBACAQ,eACAC,UACAC,oBACAnB,aAN6tB,gBAO7tBS,IAP6tB,EAQ7tBH,eAR6tB,GAS5tBM,QAAQ,eACZ,WAAM,MACyBO,mBAAS,CAAC,gBAAiB,SAA9CG,EADN,KACaC,EADb,KAED,OAAO,uBACP,mBAAKC,MAAO,CACRC,SAAU,GACVC,aAAc,KAFlB,UAGaJ,EAAMK,KAAK,OACxB,YAAC,EAAD,CAAWzB,aAAW,EAACC,UAAQ,EAACkB,YAAY,kBAAkBD,MAAM,aAAaQ,QAAQ,WAAWN,MAAOA,EAAOO,SAAU,SAAAP,GACxHC,EAASD,IACRQ,UAAW,CACZC,UAAU,EACVC,SAAS,EACTC,MAAO,WACNC,cAAe,SAAAZ,GAAK,cAAYA,EAAZ,KAAsBlB,gBAAgB,EAAMQ,QAAQ,kBAIjF,iBAAQ,CACN,GAAM,cADR,cAGA,YAAC,IAAD,CAAOuB,GAAInC,EAAWoC,OAAK,EAACxB,QAAQ,gB,2MAKxCF,EAAW2B,gBAAiB","file":"component---src-chip-input-chip-input-mdx-4846e476d5c1d1be4113.js","sourcesContent":["import React, { FC, memo } from 'react';\nimport Autocomplete, { AutocompleteProps } from '../AutoComplete';\n\nconst ChipInput: FC<AutocompleteProps> = (props) => (\n\t<Autocomplete allowCreate multiple showCreateText={false} {...props} />\n);\n\nexport default memo(ChipInput);\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/doopage-react-ui-kit/doopage-react-ui-kit/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from \"docz\";\nimport { useState } from \"react\";\nimport ChipInput from \"./index\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"chip-input\"\n    }}>{`Chip Input`}</h1>\n    <p>{`Base on `}<a parentName=\"p\" {...{\n        \"href\": \"https://huynhhuyhiep.github.io/doopage-react-ui-kit/autocomplete\"\n      }}>{`Auto Complete`}</a></p>\n    <p>{`Related component`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://huynhhuyhiep.github.io/doopage-react-ui-kit/autocomplete\"\n        }}>{`Auto Complete`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { ChipInput } from '@doopage/react-ui-kit'\n\nconst Example = () => <ChipInput label={'Chip Input'}/>;\n\nexport default Example;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"playground\"\n    }}>{`Playground`}</h2>\n    <h3 {...{\n      \"id\": \"normal\"\n    }}>{`Normal`}</h3>\n    <Playground __position={0} __code={'<ChipInput label={\\'Chip Input\\'} placeholder={\\'Enter to Submit\\'} />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      ChipInput,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <ChipInput label={'Chip Input'} placeholder={'Enter to Submit'} mdxType=\"ChipInput\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"advanced\"\n    }}>{`Advanced`}</h3>\n    <Playground __position={1} __code={'() => {\\n  const [value, setValue] = useState([\\'default value\\', \\'llll\\'])\\n  return (\\n    <div>\\n      <div style={{ fontSize: 15, marginBottom: 10 }}>\\n        Value: {value.join(\\', \\')}\\n      </div>\\n      <ChipInput\\n        allowCreate\\n        multiple\\n        placeholder=\\\"Enter to Submit\\\"\\n        label=\\\"Chip Input\\\"\\n        variant=\\\"outlined\\\"\\n        value={value}\\n        onChange={value => {\\n          setValue(value)\\n        }}\\n        chipProps={{\\n          outlined: false,\\n          rounded: true,\\n          color: \\'warning\\',\\n        }}\\n        setCreateText={value => `Add \\\"${value}\\\"`}\\n        showCreateText={true}\\n      />\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      ChipInput,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [value, setValue] = useState(['default value', 'llll']);\n        return <div>\n        <div style={{\n            fontSize: 15,\n            marginBottom: 10\n          }}>Value: {value.join(', ')}</div>\n        <ChipInput allowCreate multiple placeholder='Enter to Submit' label='Chip Input' variant='outlined' value={value} onChange={value => {\n            setValue(value);\n          }} chipProps={{\n            outlined: false,\n            rounded: true,\n            color: 'warning'\n          }} setCreateText={value => `Add \"${value}\"`} showCreateText={true} mdxType=\"ChipInput\" />\n      </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={ChipInput} table mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}