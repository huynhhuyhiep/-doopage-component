{"version":3,"sources":["webpack:///../src/AutoComplete/AutoComplete.mdx"],"names":["_frontmatter","name","Props","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","__position","__code","__scope","AdbIcon","Playground","useState","useMemo","Avatar","AutoComplete","doopageLogo","options","id","multiple","icon","description","src","size","avatar","image","placeholder","label","variant","chipColor","Array","fill","map","item","index","toString","valueSingle","setValueSingle","valueMulti","setValueMulti","style","fontSize","marginBottom","value","onChange","join","values","setValues","setValue","allowCreate","setCreateText","marginTop","chipProps","outlined","rounded","color","showCreateText","allowDuplicates","undefined","loading","setLoading","error","getData","fetch","then","response","catch","err","of","table","isMDXComponent"],"mappings":"4TAcaA,G,UAAe,S,mNAE5B,IAAsBC,EAKhBC,GALgBD,EAKM,QALE,SAA6BE,GAEzD,OADAC,QAAQC,KAAK,aAAeJ,EAAO,2EAC5B,kBAASE,KAIZG,EAAc,CAClBN,gBAEIO,EAAYC,IACH,SAASC,EAAT,GAGZ,kBAFDC,EAEC,EAFDA,WACGP,EACF,8BACD,OAAO,YAACI,EAAD,eAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,cAI5E,kBACE,GAAM,gBADR,gBAGA,gCAAe,iBAAGC,WAAW,IACzB,KAAQ,iEADG,kEAGf,0CACA,sBACE,kBAAIA,WAAW,MAAK,iBAAGA,WAAW,KAC9B,KAAQ,6DADQ,WAItB,6BACA,sBACE,kBAAIA,WAAW,MAAK,iBAAGA,WAAW,KAC9B,KAAQ,sDADQ,wDAItB,kBACE,GAAM,eADR,eAGA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,+QAcL,kBACE,GAAM,cADR,cAGA,kBACE,GAAM,SADR,SAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,qIAA8IC,SAAO,GACtLZ,QACAK,kBACAQ,YACAC,eACAC,oBACAC,kBACAC,WACAC,iBACAC,iBATsL,gBAUtLd,IAVsL,EAWtLR,eAXsL,GAYrLW,QAAQ,cACb,YAAC,IAAD,CAAcY,QAAS,CAAC,CAClBC,GAAI,IACJvB,KAAM,4BACL,CACDuB,GAAI,IACJvB,KAAM,kBACJU,QAAQ,kBAEd,kBACE,GAAM,sBADR,sBAGA,YAAC,IAAD,CAAYE,WAAY,EAAGC,OAAQ,2kBAAsmBC,SAAO,GAC9oBZ,QACAK,kBACAQ,YACAC,eACAC,oBACAC,kBACAC,WACAC,iBACAC,iBAT8oB,gBAU9oBd,IAV8oB,EAW9oBR,eAX8oB,GAY7oBW,QAAQ,cACb,YAAC,IAAD,CAAcc,UAAQ,EAACF,QAAS,CAAC,CAC3BC,GAAI,IACJvB,KAAM,WACNyB,KAAM,YAAC,IAAD,CAASf,QAAQ,YACvBgB,YAAa,uBACZ,CACDH,GAAI,IACJvB,KAAM,WACNyB,KAAM,YAAC,IAAD,CAAQE,IAAKN,IAAaO,KAAM,QAASlB,QAAQ,WACvDgB,YAAa,uBACZ,CACDH,GAAI,IACJvB,KAAM,WACN6B,OAAQR,IACRK,YAAa,uBACZ,CACDH,GAAI,IACJvB,KAAM,WACN8B,MAAOT,IACPK,YAAa,wBACXhB,QAAQ,kBAEd,kBACE,GAAM,YADR,YAGA,YAAC,IAAD,CAAYE,WAAY,EAAGC,OAAQ,saAA+aC,SAAO,GACvdZ,QACAK,kBACAQ,YACAC,eACAC,oBACAC,kBACAC,WACAC,iBACAC,iBATud,gBAUvdd,IAVud,EAWvdR,eAXud,GAYtdW,QAAQ,cACb,YAAC,IAAD,CAAcc,UAAQ,EAACO,YAAY,iBAAiBC,MAAM,wBAAwBC,QAAQ,WAAWC,UAAU,OAAOZ,QAASa,MAAM,IAAIC,KAAK,GAAGC,KAAI,SAACC,EAAMC,GAAP,MAAkB,CACjKhB,GAAIgB,EAAMC,WACVxC,KAAM,UAAUuC,EAChBd,KAAMc,EAAQ,EAAI,YAAC,IAAD,CAAS7B,QAAQ,YAAe,YAAC,IAAD,CAAQiB,IAAKN,IAAaO,KAAM,QAASlB,QAAQ,WACnGgB,YAAa,sBAAsBa,MAChC7B,QAAQ,kBAEf,kBACE,GAAM,WADR,WAGA,YAAC,IAAD,CAAYE,WAAY,EAAGC,OAAQ,ipCAA8pCC,SAAO,GACtsCZ,QACAK,kBACAQ,YACAC,eACAC,oBACAC,kBACAC,WACAC,iBACAC,iBATssC,gBAUtsCd,IAVssC,EAWtsCR,eAXssC,GAYrsCW,QAAQ,eACZ,WAAM,MACqCO,mBAAS,KAAxCwB,EADN,KACmBC,EADnB,OAEmCzB,mBAAS,CAAC,IAAK,MAA5C0B,EAFN,KAEkBC,EAFlB,KAGKtB,EAAUJ,mBAAQ,kBAAMiB,MAAM,IAAIC,KAAK,GAAGC,KAAI,SAACC,EAAMC,GAAP,MAAkB,CACpEhB,GAAIgB,EAAMC,WACVxC,KAAM,UAAUuC,QACb,IACL,OAAO,uBACP,mBAAKM,MAAO,CACRC,SAAU,GACVC,aAAc,KAFlB,iBAGoBN,GACpB,YAAC,IAAD,CAAcV,YAAY,iBAAiBC,MAAM,sBAAsBC,QAAQ,WAAWe,MAAOP,EAAaQ,SAAU,SAAAD,GACpHN,EAAeM,IACd1B,QAASA,EAASZ,QAAQ,iBAC/B,uBACA,mBAAKmC,MAAO,CACRC,SAAU,GACVC,aAAc,KAFlB,mBAGsBJ,EAAWO,KAAK,OACtC,YAAC,IAAD,CAAc1B,UAAQ,EAACO,YAAY,iBAAiBC,MAAM,wBAAwBC,QAAQ,WAAWe,MAAOL,EAAYM,SAAU,SAAAD,GAC9HJ,EAAcI,IACb1B,QAASA,EAASZ,QAAQ,qBAInC,kBACE,GAAM,uBADR,uBAGA,YAAC,IAAD,CAAYE,WAAY,EAAGC,OAAQ,69CAA8+CC,SAAO,GACthDZ,QACAK,kBACAQ,YACAC,eACAC,oBACAC,kBACAC,WACAC,iBACAC,iBATshD,gBAUthDd,IAVshD,EAWthDR,eAXshD,GAYrhDW,QAAQ,eACZ,WAAM,MAC2BO,mBAAS,CAAC,IAAK,MAApCkC,EADN,KACcC,EADd,OAEyBnC,mBAAS,KAA5B+B,EAFN,KAEaK,EAFb,KAGD,OAAO,uBACP,mBAAKR,MAAO,CACRC,SAAU,GACVC,aAAc,KAFlB,UAGaC,GACb,YAAC,IAAD,CAAcM,aAAW,EAACvB,YAAY,kCAAkCC,MAAM,SAASC,QAAQ,WAAWe,MAAOA,EAAOC,SAAU,SAAAD,GAC9HK,EAASL,IACR1B,QAASa,MAAM,IAAIC,KAAK,GAAGC,KAAI,SAACC,EAAMC,GAAP,MAAkB,CAClDhB,GAAIgB,EAAMC,WACVxC,KAAM,UAAUuC,MACbgB,cAAe,SAAAP,GAAK,cAAYA,EAAZ,KAAsBtC,QAAQ,iBACzD,mBAAKmC,MAAO,CACRC,SAAU,GACVC,aAAc,GACdS,UAAW,KAHf,UAIaL,EAAOD,KAAK,OACzB,YAAC,IAAD,CAAcI,aAAW,EAAC9B,UAAQ,EAACO,YAAY,kCAAkCC,MAAM,WAAWC,QAAQ,WAAWe,MAAOG,EAAQF,SAAU,SAAAD,GAC1II,EAAUJ,IACT1B,QAASa,MAAM,IAAIC,KAAK,GAAGC,KAAI,SAACC,EAAMC,GAAP,MAAkB,CAClDhB,GAAIgB,EAAMC,WACVxC,KAAM,UAAUuC,MACbkB,UAAW,CACdC,UAAU,EACVC,SAAS,EACTC,MAAO,WACNL,cAAe,SAAAP,GAAK,cAAYA,EAAZ,KAAsBa,gBAAgB,EAAOC,iBAAe,EAACpD,QAAQ,qBAIlG,kBACE,GAAM,qBADR,qBAGA,YAAC,IAAD,CAAYE,WAAY,EAAGC,OAAQ,2sBAAotBC,SAAO,GAC5vBZ,QACAK,kBACAQ,YACAC,eACAC,oBACAC,kBACAC,WACAC,iBACAC,iBAT4vB,gBAU5vBd,IAV4vB,EAW5vBR,eAX4vB,GAY3vBW,QAAQ,eACZ,WAAM,MACyBO,mBAAS,CAAC,IAAK,MAAlC+B,EADN,KACaK,EADb,KAED,OAAO,uBACP,mBAAKR,MAAO,CACRC,SAAU,GACVC,aAAc,KAFlB,UAGaC,EAAME,KAAK,OACxB,YAAC,IAAD,CAAcI,aAAW,EAAC9B,UAAQ,EAACO,YAAY,iBAAiBC,MAAM,wBAAwBC,QAAQ,WAAWe,MAAOA,EAAOC,SAAU,SAAAD,GACrIK,EAASL,IACR1B,QAASa,MAAM,IAAIC,KAAK,GAAGC,KAAI,SAACC,EAAMC,GAAP,MAAkB,CAClDhB,GAAIgB,EAAMC,WACVxC,KAAM,UAAUuC,EAChBqB,MAAOrB,EAAQ,GAAM,EAAI,eAAYwB,MAClCrD,QAAQ,qBAInB,kBACE,GAAM,wBADR,wBAGA,YAAC,IAAD,CAAYE,WAAY,EAAGC,OAAQ,0qBAA+qBC,SAAO,GACvtBZ,QACAK,kBACAQ,YACAC,eACAC,oBACAC,kBACAC,WACAC,iBACAC,iBATutB,gBAUvtBd,IAVutB,EAWvtBR,eAXutB,GAYttBW,QAAQ,eACZ,WAAM,MAC6BO,oBAAS,GAAhC+C,EADN,KACeC,EADf,OAE6BhD,mBAAS,IAAhCK,EAFN,aAGyBL,mBAAS,KAA5BiD,EAHN,UAcD,OAAO,uBACP,YAAC,IAAD,CAAcA,MAAOA,EAAOF,QAASA,EAASG,QAV9B,SAAAnB,GACdiB,GAAW,GACXG,MAAM,YAAYC,MAAK,SAAAC,OAEpBC,OAAM,SAAAC,OAETP,GAAW,IAImDzC,UAAQ,EAACO,YAAY,sBAAsBC,MAAM,gBAAgBV,QAASA,EAASZ,QAAQ,qBAI/J,kBACE,GAAM,cADR,cAGA,YAACT,EAAD,CAAOwE,GAAIrD,IAAcsD,OAAK,EAAChE,QAAQ,gB,iNAK3CF,EAAWmE,gBAAiB","file":"component---src-auto-complete-auto-complete-mdx-1eb38563b37e4b9da9fe.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/doopage-react-ui-kit/doopage-react-ui-kit/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport AdbIcon from \"@material-ui/icons/Adb\";\nimport { Playground } from \"docz\";\nimport { useState, useMemo } from \"react\";\nimport Avatar from \"../Avatar\";\nimport { AutoComplete } from \"../index\";\nimport { doopageLogo } from \"../utils/constants\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Props = makeShortcode(\"Props\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"autocomplete\"\n    }}>{`AutoComplete`}</h1>\n    <p>{`Base on `}<a parentName=\"p\" {...{\n        \"href\": \"https://material-ui.com/components/autocomplete/#autocomplete\"\n      }}>{`https://material-ui.com/components/autocomplete/#autocomplete`}</a></p>\n    <p>{`Related component`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://huynhhuyhiep.github.io/doopage-react-ui-kit/input\"\n        }}>{`Input`}</a></li>\n    </ul>\n    <p>{`Icon`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://material-ui.com/components/material-icons/\"\n        }}>{`https://material-ui.com/components/material-icons/`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { AutoComplete } from '@doopage/react-ui-kit'\n\nconst Example = () =>\n    <AutoComplete\n      options={[\n          { id: '1', name: 'The Shawshank Redemption' },\n          { id: '2', name: 'The Godfather' },\n      ]}\n    />\n\nexport default Example;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"playground\"\n    }}>{`Playground`}</h2>\n    <h3 {...{\n      \"id\": \"basic\"\n    }}>{`Basic`}</h3>\n    <Playground __position={0} __code={'<AutoComplete\\n  options={[\\n    { id: \\'1\\', name: \\'The Shawshank Redemption\\' },\\n    { id: \\'2\\', name: \\'The Godfather\\' },\\n  ]}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      AdbIcon,\n      Playground,\n      useState,\n      useMemo,\n      Avatar,\n      AutoComplete,\n      doopageLogo,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <AutoComplete options={[{\n        id: '1',\n        name: 'The Shawshank Redemption'\n      }, {\n        id: '2',\n        name: 'The Godfather'\n      }]} mdxType=\"AutoComplete\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"custom-option-item\"\n    }}>{`Custom option item`}</h3>\n    <Playground __position={1} __code={'<AutoComplete\\n  multiple\\n  options={[\\n    {\\n      id: \\'1\\',\\n      name: \\'option 1\\',\\n      icon: <AdbIcon />,\\n      description: \\'description options\\',\\n    },\\n    {\\n      id: \\'2\\',\\n      name: \\'option 2\\',\\n      icon: <Avatar src={doopageLogo} size={\\'small\\'} />,\\n      description: \\'description options\\',\\n    },\\n    {\\n      id: \\'3\\',\\n      name: \\'option 3\\',\\n      avatar: doopageLogo,\\n      description: \\'description options\\',\\n    },\\n    {\\n      id: \\'4\\',\\n      name: \\'option 4\\',\\n      image: doopageLogo,\\n      description: \\'description options\\',\\n    },\\n  ]}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      AdbIcon,\n      Playground,\n      useState,\n      useMemo,\n      Avatar,\n      AutoComplete,\n      doopageLogo,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <AutoComplete multiple options={[{\n        id: '1',\n        name: \"option 1\",\n        icon: <AdbIcon mdxType=\"AdbIcon\" />,\n        description: 'description options'\n      }, {\n        id: '2',\n        name: \"option 2\",\n        icon: <Avatar src={doopageLogo} size={\"small\"} mdxType=\"Avatar\" />,\n        description: 'description options'\n      }, {\n        id: '3',\n        name: \"option 3\",\n        avatar: doopageLogo,\n        description: 'description options'\n      }, {\n        id: '4',\n        name: \"option 4\",\n        image: doopageLogo,\n        description: 'description options'\n      }]} mdxType=\"AutoComplete\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"multiple\"\n    }}>{`Multiple`}</h3>\n    <Playground __position={2} __code={'<AutoComplete\\n  multiple\\n  placeholder=\\\"Select options\\\"\\n  label=\\\"AutoComplete Multiple\\\"\\n  variant=\\\"outlined\\\"\\n  chipColor=\\\"info\\\"\\n  options={Array(10)\\n    .fill(0)\\n    .map((item, index) => ({\\n      id: index.toString(),\\n      name: `option ${index}`,\\n      icon:\\n        index % 2 ? <AdbIcon /> : <Avatar src={doopageLogo} size={\\'small\\'} />,\\n      description: `description option ${index}`,\\n    }))}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      AdbIcon,\n      Playground,\n      useState,\n      useMemo,\n      Avatar,\n      AutoComplete,\n      doopageLogo,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <AutoComplete multiple placeholder='Select options' label='AutoComplete Multiple' variant='outlined' chipColor='info' options={Array(10).fill(0).map((item, index) => ({\n        id: index.toString(),\n        name: `option ${index}`,\n        icon: index % 2 ? <AdbIcon mdxType=\"AdbIcon\" /> : <Avatar src={doopageLogo} size={\"small\"} mdxType=\"Avatar\" />,\n        description: `description option ${index}`\n      }))} mdxType=\"AutoComplete\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"control\"\n    }}>{`Control`}</h3>\n    <Playground __position={3} __code={'() => {\\n  const [valueSingle, setValueSingle] = useState(\\'3\\')\\n  const [valueMulti, setValueMulti] = useState([\\'1\\', \\'2\\'])\\n  const options = useMemo(\\n    () =>\\n      Array(10)\\n        .fill(0)\\n        .map((item, index) => ({\\n          id: index.toString(),\\n          name: `option ${index}`,\\n        })),\\n    [],\\n  )\\n  return (\\n    <div>\\n      <div style={{ fontSize: 15, marginBottom: 10 }}>\\n        Single Value: {valueSingle}\\n      </div>\\n      <AutoComplete\\n        placeholder=\\\"Select options\\\"\\n        label=\\\"AutoComplete Single\\\"\\n        variant=\\\"outlined\\\"\\n        value={valueSingle}\\n        onChange={value => {\\n          setValueSingle(value)\\n        }}\\n        options={options}\\n      />\\n      <br />\\n      <div style={{ fontSize: 15, marginBottom: 10 }}>\\n        Multiple Value: {valueMulti.join(\\', \\')}\\n      </div>\\n      <AutoComplete\\n        multiple\\n        placeholder=\\\"Select options\\\"\\n        label=\\\"AutoComplete Multiple\\\"\\n        variant=\\\"outlined\\\"\\n        value={valueMulti}\\n        onChange={value => {\\n          setValueMulti(value)\\n        }}\\n        options={options}\\n      />\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      AdbIcon,\n      Playground,\n      useState,\n      useMemo,\n      Avatar,\n      AutoComplete,\n      doopageLogo,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [valueSingle, setValueSingle] = useState('3');\n        const [valueMulti, setValueMulti] = useState(['1', '2']);\n        const options = useMemo(() => Array(10).fill(0).map((item, index) => ({\n          id: index.toString(),\n          name: `option ${index}`\n        })), []);\n        return <div>\n        <div style={{\n            fontSize: 15,\n            marginBottom: 10\n          }}>Single Value: {valueSingle}</div>\n        <AutoComplete placeholder='Select options' label='AutoComplete Single' variant='outlined' value={valueSingle} onChange={value => {\n            setValueSingle(value);\n          }} options={options} mdxType=\"AutoComplete\" />\n        <br />\n        <div style={{\n            fontSize: 15,\n            marginBottom: 10\n          }}>Multiple Value: {valueMulti.join(', ')}</div>\n        <AutoComplete multiple placeholder='Select options' label='AutoComplete Multiple' variant='outlined' value={valueMulti} onChange={value => {\n            setValueMulti(value);\n          }} options={options} mdxType=\"AutoComplete\" />\n      </div>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"allow-add-more-item\"\n    }}>{`Allow add more item`}</h3>\n    <Playground __position={4} __code={'() => {\\n  const [values, setValues] = useState([\\'1\\', \\'2\\'])\\n  const [value, setValue] = useState(\\'1\\')\\n  return (\\n    <div>\\n      <div style={{ fontSize: 15, marginBottom: 10 }}>Value: {value}</div>\\n      <AutoComplete\\n        allowCreate\\n        placeholder=\\\"Select options or typing to add\\\"\\n        label=\\\"Single\\\"\\n        variant=\\\"outlined\\\"\\n        value={value}\\n        onChange={value => {\\n          setValue(value)\\n        }}\\n        options={Array(10)\\n          .fill(0)\\n          .map((item, index) => ({\\n            id: index.toString(),\\n            name: `option ${index}`,\\n          }))}\\n        setCreateText={value => `Add \\\"${value}\\\"`}\\n      />\\n      <div style={{ fontSize: 15, marginBottom: 10, marginTop: 10 }}>\\n        Value: {values.join(\\', \\')}\\n      </div>\\n      <AutoComplete\\n        allowCreate\\n        multiple\\n        placeholder=\\\"Select options or typing to add\\\"\\n        label=\\\"Multiple\\\"\\n        variant=\\\"outlined\\\"\\n        value={values}\\n        onChange={value => {\\n          setValues(value)\\n        }}\\n        options={Array(10)\\n          .fill(0)\\n          .map((item, index) => ({\\n            id: index.toString(),\\n            name: `option ${index}`,\\n          }))}\\n        chipProps={{\\n          outlined: false,\\n          rounded: true,\\n          color: \\'success\\',\\n        }}\\n        setCreateText={value => `Add \\\"${value}\\\"`}\\n        showCreateText={false}\\n        allowDuplicates\\n      />\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      AdbIcon,\n      Playground,\n      useState,\n      useMemo,\n      Avatar,\n      AutoComplete,\n      doopageLogo,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [values, setValues] = useState(['1', '2']);\n        const [value, setValue] = useState('1');\n        return <div>\n        <div style={{\n            fontSize: 15,\n            marginBottom: 10\n          }}>Value: {value}</div>\n        <AutoComplete allowCreate placeholder='Select options or typing to add' label='Single' variant='outlined' value={value} onChange={value => {\n            setValue(value);\n          }} options={Array(10).fill(0).map((item, index) => ({\n            id: index.toString(),\n            name: `option ${index}`\n          }))} setCreateText={value => `Add \"${value}\"`} mdxType=\"AutoComplete\" />\n        <div style={{\n            fontSize: 15,\n            marginBottom: 10,\n            marginTop: 10\n          }}>Value: {values.join(', ')}</div>\n        <AutoComplete allowCreate multiple placeholder='Select options or typing to add' label='Multiple' variant='outlined' value={values} onChange={value => {\n            setValues(value);\n          }} options={Array(10).fill(0).map((item, index) => ({\n            id: index.toString(),\n            name: `option ${index}`\n          }))} chipProps={{\n            outlined: false,\n            rounded: true,\n            color: 'success'\n          }} setCreateText={value => `Add \"${value}\"`} showCreateText={false} allowDuplicates mdxType=\"AutoComplete\" />\n      </div>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"custom-chip-color\"\n    }}>{`Custom chip color`}</h3>\n    <Playground __position={5} __code={'() => {\\n  const [value, setValue] = useState([\\'1\\', \\'2\\'])\\n  return (\\n    <div>\\n      <div style={{ fontSize: 15, marginBottom: 10 }}>\\n        Value: {value.join(\\', \\')}\\n      </div>\\n      <AutoComplete\\n        allowCreate\\n        multiple\\n        placeholder=\\\"Select options\\\"\\n        label=\\\"AutoComplete Multiple\\\"\\n        variant=\\\"outlined\\\"\\n        value={value}\\n        onChange={value => {\\n          setValue(value)\\n        }}\\n        options={Array(10)\\n          .fill(0)\\n          .map((item, index) => ({\\n            id: index.toString(),\\n            name: `option ${index}`,\\n            color: index % 2 === 0 ? \\'#D8BFD8\\' : undefined,\\n          }))}\\n      />\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      AdbIcon,\n      Playground,\n      useState,\n      useMemo,\n      Avatar,\n      AutoComplete,\n      doopageLogo,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [value, setValue] = useState(['1', '2']);\n        return <div>\n        <div style={{\n            fontSize: 15,\n            marginBottom: 10\n          }}>Value: {value.join(', ')}</div>\n        <AutoComplete allowCreate multiple placeholder='Select options' label='AutoComplete Multiple' variant='outlined' value={value} onChange={value => {\n            setValue(value);\n          }} options={Array(10).fill(0).map((item, index) => ({\n            id: index.toString(),\n            name: `option ${index}`,\n            color: index % 2 === 0 ? '#D8BFD8' : undefined\n          }))} mdxType=\"AutoComplete\" />\n      </div>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"search-base-on-input\"\n    }}>{`Search base on input`}</h3>\n    <Playground __position={6} __code={'() => {\\n  const [loading, setLoading] = useState(false)\\n  const [options, setOptions] = useState([])\\n  const [error, setError] = useState(\\'\\')\\n  const getData = value => {\\n    setLoading(true)\\n    fetch(\\'YOUR API\\')\\n      .then(response => {\\n        // set OPTIONS\\n        // setOptions(YOUR RESPONSE)\\n      })\\n      .catch(err => {\\n        // setError(err)\\n      })\\n    setLoading(false)\\n  }\\n  return (\\n    <div>\\n      <AutoComplete\\n        error={error}\\n        loading={loading}\\n        getData={getData}\\n        multiple\\n        placeholder=\\\"Typing your keyword\\\"\\n        label=\\\"Search google\\\"\\n        options={options}\\n      />\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      AdbIcon,\n      Playground,\n      useState,\n      useMemo,\n      Avatar,\n      AutoComplete,\n      doopageLogo,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [loading, setLoading] = useState(false);\n        const [options, setOptions] = useState([]);\n        const [error, setError] = useState('');\n\n        const getData = value => {\n          setLoading(true);\n          fetch(\"YOUR API\").then(response => {// set OPTIONS\n            // setOptions(YOUR RESPONSE)\n          }).catch(err => {// setError(err)\n          });\n          setLoading(false);\n        };\n\n        return <div>\n        <AutoComplete error={error} loading={loading} getData={getData} multiple placeholder='Typing your keyword' label='Search google' options={options} mdxType=\"AutoComplete\" />\n      </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={AutoComplete} table mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}