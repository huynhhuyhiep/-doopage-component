{"version":3,"sources":["webpack:///../src/AutoComplete/AutoComplete.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","AdbIcon","Playground","Props","useState","useMemo","Avatar","Autocomplete","doopageLogo","options","id","name","icon","description","multiple","placeholder","label","variant","chipColor","Array","fill","map","item","index","toString","src","size","valueSingle","setValueSingle","valueMulti","setValueMulti","style","fontSize","marginBottom","value","onChange","join","setValue","allowCreate","chipProps","outlined","rounded","color","setCreateText","showCreateText","allowDuplicates","of","table","isMDXComponent"],"mappings":"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","file":"component---src-auto-complete-auto-complete-mdx-aea687d532ea00ee83f4.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/doopage-react-ui-kit/doopage-react-ui-kit/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport AdbIcon from \"@material-ui/icons/Adb\";\nimport { Playground, Props } from \"docz\";\nimport { useState, useMemo } from \"react\";\nimport Avatar from \"../Avatar\";\nimport { Autocomplete } from \"../index\";\nimport { doopageLogo } from \"../utils/constants\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"autocomplete\"\n    }}>{`Autocomplete`}</h1>\n    <p>{`Base on `}<a parentName=\"p\" {...{\n        \"href\": \"https://material-ui.com/components/autocomplete/#autocomplete\"\n      }}>{`https://material-ui.com/components/autocomplete/#autocomplete`}</a></p>\n    <p>{`Related component`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://huynhhuyhiep.github.io/doopage-react-ui-kit/input\"\n        }}>{`Input`}</a></li>\n    </ul>\n    <p>{`Icon`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://material-ui.com/components/material-icons/\"\n        }}>{`https://material-ui.com/components/material-icons/`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { Autocomplete } from '@doopage/react-ui-kit'\n\nconst Example = () =>\n    <Autocomplete\n      options={[\n          { id: '1', name: 'The Shawshank Redemption' },\n          { id: '2', name: 'The Godfather' },\n      ]}\n    />\n\nexport default Example;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"playground\"\n    }}>{`Playground`}</h2>\n    <h3 {...{\n      \"id\": \"basic\"\n    }}>{`Basic`}</h3>\n    <Playground __position={0} __code={'<Autocomplete\\n  options={[\\n    { id: \\'1\\', name: \\'The Shawshank Redemption\\' },\\n    { id: \\'2\\', name: \\'The Godfather\\' },\\n  ]}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      AdbIcon,\n      Playground,\n      Props,\n      useState,\n      useMemo,\n      Avatar,\n      Autocomplete,\n      doopageLogo,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Autocomplete options={[{\n        id: '1',\n        name: 'The Shawshank Redemption'\n      }, {\n        id: '2',\n        name: 'The Godfather'\n      }]} mdxType=\"Autocomplete\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"custom-option-item\"\n    }}>{`Custom option item`}</h3>\n    <Playground __position={1} __code={'<Autocomplete\\n  options={[\\n    {\\n      id: \\'1\\',\\n      name: \\'option 1\\',\\n      icon: <AdbIcon />,\\n      description: \\'description options\\',\\n    },\\n    {\\n      id: \\'2\\',\\n      name: \\'option 2\\',\\n      icon: <AdbIcon />,\\n      description: \\'description options\\',\\n    },\\n  ]}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      AdbIcon,\n      Playground,\n      Props,\n      useState,\n      useMemo,\n      Avatar,\n      Autocomplete,\n      doopageLogo,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Autocomplete options={[{\n        id: '1',\n        name: \"option 1\",\n        icon: <AdbIcon mdxType=\"AdbIcon\" />,\n        description: 'description options'\n      }, {\n        id: '2',\n        name: \"option 2\",\n        icon: <AdbIcon mdxType=\"AdbIcon\" />,\n        description: 'description options'\n      }]} mdxType=\"Autocomplete\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"multiple\"\n    }}>{`Multiple`}</h3>\n    <Playground __position={2} __code={'<Autocomplete\\n  multiple\\n  placeholder=\\\"Select options\\\"\\n  label=\\\"Autocomplete Multiple\\\"\\n  variant=\\\"outlined\\\"\\n  chipColor=\\\"info\\\"\\n  options={Array(10)\\n    .fill(0)\\n    .map((item, index) => ({\\n      id: index.toString(),\\n      name: `option ${index}`,\\n      icon:\\n        index % 2 ? <AdbIcon /> : <Avatar src={doopageLogo} size={\\'small\\'} />,\\n      description: `description option ${index}`,\\n    }))}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      AdbIcon,\n      Playground,\n      Props,\n      useState,\n      useMemo,\n      Avatar,\n      Autocomplete,\n      doopageLogo,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <Autocomplete multiple placeholder='Select options' label='Autocomplete Multiple' variant='outlined' chipColor='info' options={Array(10).fill(0).map((item, index) => ({\n        id: index.toString(),\n        name: `option ${index}`,\n        icon: index % 2 ? <AdbIcon mdxType=\"AdbIcon\" /> : <Avatar src={doopageLogo} size={\"small\"} mdxType=\"Avatar\" />,\n        description: `description option ${index}`\n      }))} mdxType=\"Autocomplete\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"control\"\n    }}>{`Control`}</h3>\n    <Playground __position={3} __code={'() => {\\n  const [valueSingle, setValueSingle] = useState(\\'3\\')\\n  const [valueMulti, setValueMulti] = useState([\\'1\\', \\'2\\'])\\n  const options = useMemo(\\n    () =>\\n      Array(10)\\n        .fill(0)\\n        .map((item, index) => ({\\n          id: index.toString(),\\n          name: `option ${index}`,\\n        })),\\n    [],\\n  )\\n  return (\\n    <div>\\n      <div style={{ fontSize: 15, marginBottom: 10 }}>\\n        Single Value: {valueSingle}\\n      </div>\\n      <Autocomplete\\n        placeholder=\\\"Select options\\\"\\n        label=\\\"Autocomplete Single\\\"\\n        variant=\\\"outlined\\\"\\n        value={valueSingle}\\n        onChange={value => {\\n          setValueSingle(value)\\n        }}\\n        options={options}\\n      />\\n      <br />\\n      <div style={{ fontSize: 15, marginBottom: 10 }}>\\n        Multiple Value: {valueMulti.join(\\', \\')}\\n      </div>\\n      <Autocomplete\\n        multiple\\n        placeholder=\\\"Select options\\\"\\n        label=\\\"Autocomplete Multiple\\\"\\n        variant=\\\"outlined\\\"\\n        value={valueMulti}\\n        onChange={value => {\\n          setValueMulti(value)\\n        }}\\n        options={options}\\n      />\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      AdbIcon,\n      Playground,\n      Props,\n      useState,\n      useMemo,\n      Avatar,\n      Autocomplete,\n      doopageLogo,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [valueSingle, setValueSingle] = useState('3');\n        const [valueMulti, setValueMulti] = useState(['1', '2']);\n        const options = useMemo(() => Array(10).fill(0).map((item, index) => ({\n          id: index.toString(),\n          name: `option ${index}`\n        })), []);\n        return <div>\n        <div style={{\n            fontSize: 15,\n            marginBottom: 10\n          }}>Single Value: {valueSingle}</div>\n        <Autocomplete placeholder='Select options' label='Autocomplete Single' variant='outlined' value={valueSingle} onChange={value => {\n            setValueSingle(value);\n          }} options={options} mdxType=\"Autocomplete\" />\n        <br />\n        <div style={{\n            fontSize: 15,\n            marginBottom: 10\n          }}>Multiple Value: {valueMulti.join(', ')}</div>\n        <Autocomplete multiple placeholder='Select options' label='Autocomplete Multiple' variant='outlined' value={valueMulti} onChange={value => {\n            setValueMulti(value);\n          }} options={options} mdxType=\"Autocomplete\" />\n      </div>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"allow-create-item\"\n    }}>{`Allow create item`}</h3>\n    <Playground __position={4} __code={'() => {\\n  const [value, setValue] = useState([\\'1\\', \\'2\\'])\\n  return (\\n    <div>\\n      <div style={{ fontSize: 15, marginBottom: 10 }}>\\n        Value: {value.join(\\', \\')}\\n      </div>\\n      <Autocomplete\\n        allowCreate\\n        multiple\\n        placeholder=\\\"Select options\\\"\\n        label=\\\"Autocomplete Multiple\\\"\\n        variant=\\\"outlined\\\"\\n        value={value}\\n        onChange={value => {\\n          setValue(value)\\n        }}\\n        options={Array(10)\\n          .fill(0)\\n          .map((item, index) => ({\\n            id: index.toString(),\\n            name: `option ${index}`,\\n          }))}\\n        chipProps={{\\n          outlined: false,\\n          rounded: true,\\n          color: \\'success\\',\\n        }}\\n        setCreateText={value => `Add \\\"${value}\\\"`}\\n        showCreateText={false}\\n        allowDuplicates\\n      />\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      AdbIcon,\n      Playground,\n      Props,\n      useState,\n      useMemo,\n      Avatar,\n      Autocomplete,\n      doopageLogo,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [value, setValue] = useState(['1', '2']);\n        return <div>\n        <div style={{\n            fontSize: 15,\n            marginBottom: 10\n          }}>Value: {value.join(', ')}</div>\n        <Autocomplete allowCreate multiple placeholder='Select options' label='Autocomplete Multiple' variant='outlined' value={value} onChange={value => {\n            setValue(value);\n          }} options={Array(10).fill(0).map((item, index) => ({\n            id: index.toString(),\n            name: `option ${index}`\n          }))} chipProps={{\n            outlined: false,\n            rounded: true,\n            color: 'success'\n          }} setCreateText={value => `Add \"${value}\"`} showCreateText={false} allowDuplicates mdxType=\"Autocomplete\" />\n      </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={Autocomplete} table mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}